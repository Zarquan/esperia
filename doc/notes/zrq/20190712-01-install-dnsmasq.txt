#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2019, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#

# -----------------------------------------------------
# Check the network config.
#[user@headnode]

    cat /etc/netplan/01-netcfg.yaml

--START--
# This file describes the network interfaces available on your system
# For more information, see netplan(5).
network:
  version: 2
  renderer: networkd
  ethernets:
    enp4s4f0:
      addresses: [ 192.41.108.47/24 ]
      gateway4: 192.41.108.126
      nameservers:
          search: [ roe.ac.uk ]
          addresses:
              - "195.194.120.1"
              - "195.194.120.2"
              - "8.8.8.8"

    enp5s0:
      addresses: [ 172.16.1.11/16 ]
--END--


# -----------------------------------------------------
# Backup the network config.
#[user@headnode]

    cp /etc/netplan/01-netcfg.yaml ${HOME}/01-netcfg.bak


# -----------------------------------------------------
# Configure the bridged network and nameserver.
#[user@headnode]

    sudo vi /etc/netplan/01-netcfg.yaml

        # This file describes the network interfaces available on your system
        # For more information, see netplan(5).
        network:
          version: 2
          renderer: networkd
          ethernets:

            enp4s4f0:
              dhcp4: false
              optional: true
              addresses:
                - "192.41.108.47/24"
              gateway4: 192.41.108.126

            enp5s0:
              dhcp4: false
              optional: true

          bridges:

            br1:
              dhcp4: false
              optional: true
              addresses:
                - "172.16.1.11/16"
              interfaces:
                - "enp5s0"
              nameservers:
                search:
                  - ""
                  - "esperia"
                  - "roe.ac.uk"
                addresses:
                  - "172.16.1.1"
                  - "172.16.1.11"

# -----------------------------------------------------
# Deploy the new network configuration.
#[user@headnode]

    sudo netplan generate

    sudo netplan apply


# -----------------------------------------------------
# List the iptables INPUT chain.
#[user@headnode]

    sudo iptables \
        --verbose \
        --line-numbers \
        --table filter \
        --list INPUT

--START--
Chain INPUT (policy DROP 0 packets, 0 bytes)
num   pkts bytes target     prot opt in     out     source               destination
1        0     0 ACCEPT     udp  --  virbr0 any     anywhere             anywhere             udp dpt:bootps
2        0     0 ACCEPT     tcp  --  virbr0 any     anywhere             anywhere             tcp dpt:bootps
3        0     0 ACCEPT     udp  --  br1    any     anywhere             anywhere             udp dpt:bootps
4        0     0 ACCEPT     tcp  --  br1    any     anywhere             anywhere             tcp dpt:bootps
5     269K  176M override   all  --  any    any     anywhere             anywhere
6       52  3885 ACCEPT     all  --  lo     any     anywhere             anywhere
7      186 62386 ACCEPT     udp  --  any    any     172.16.0.0/16        anywhere
8        0     0 ACCEPT     tcp  --  any    any     172.16.0.0/16        anywhere
9        0     0 ACCEPT     tcp  --  any    any     195.194.120.0/22     anywhere             tcp dpt:ssh
10       0     0 ACCEPT     tcp  --  any    any     195.194.121.0/24     anywhere             tcp dpt:ssh
11       0     0 ACCEPT     tcp  --  any    any     192.108.120.0/24     anywhere             tcp dpt:ssh
12       0     0 ACCEPT     tcp  --  any    any     192.41.108.0/24      anywhere             tcp dpt:ssh
13       0     0 ACCEPT     tcp  --  any    any     EdLAN.net.ed.ac.uk/16  anywhere             tcp dpt:ssh
14       5   300 ACCEPT     tcp  --  any    any     polymer.andrews.metagrid.co.uk  anywhere             tcp dpt:ssh
15       0     0 ACCEPT     tcp  --  any    any     monomer.andrews.metagrid.co.uk  anywhere             tcp dpt:ssh
16       0     0 ACCEPT     all  --  enp4s4f0 any     anywhere             anywhere             ctstate RELATED,ESTABLISHED
17    244K  118M DROP       udp  --  enp4s4f0 any     anywhere             anywhere             udp dpt:bootps
18       0     0 DROP       tcp  --  enp4s4f0 any     anywhere             anywhere             tcp dpt:bootps
19    6499  447K LOG        all  --  any    any     anywhere             anywhere             LOG level warning prefix "drop "
20    6499  447K DROP       all  --  any    any     anywhere             anywhere
--END--


# -----------------------------------------------------
# Drop the virbr0 rules, because we don't have libvirt installed.
#[user@headnode]

    sudo iptables \
        --table filter \
        --delete INPUT 2

    sudo iptables \
        --table filter \
        --delete INPUT 1


# -----------------------------------------------------
# Add a rule to allow dns queries.
#[user@headnode]

    sudo iptables \
        --table filter \
        --insert INPUT 3 \
            -i br1 \
            -p udp \
            --dport 53 \
            -j ACCEPT

    sudo iptables \
        --table filter \
        --insert INPUT 4 \
            -i br1 \
            -p tcp \
            --dport 53 \
            -j ACCEPT


# -----------------------------------------------------
# List the iptables INPUT filter.
#[user@headnode]

    sudo iptables \
        --verbose \
        --line-numbers \
        --table filter \
        --list INPUT

--START--
Chain INPUT (policy DROP 0 packets, 0 bytes)
num   pkts bytes target     prot opt in     out     source               destination
1        0     0 ACCEPT     udp  --  br1    any     anywhere             anywhere             udp dpt:bootps
2        0     0 ACCEPT     tcp  --  br1    any     anywhere             anywhere             tcp dpt:bootps
3        0     0 ACCEPT     udp  --  br1    any     anywhere             anywhere             udp dpt:domain
4        0     0 ACCEPT     tcp  --  br1    any     anywhere             anywhere             tcp dpt:domain
5     279K  182M override   all  --  any    any     anywhere             anywhere
6      121  9371 ACCEPT     all  --  lo     any     anywhere             anywhere
7      186 62386 ACCEPT     udp  --  any    any     172.16.0.0/16        anywhere
8        0     0 ACCEPT     tcp  --  any    any     172.16.0.0/16        anywhere
9        0     0 ACCEPT     tcp  --  any    any     195.194.120.0/22     anywhere             tcp dpt:ssh
10       0     0 ACCEPT     tcp  --  any    any     195.194.121.0/24     anywhere             tcp dpt:ssh
11       0     0 ACCEPT     tcp  --  any    any     192.108.120.0/24     anywhere             tcp dpt:ssh
12       0     0 ACCEPT     tcp  --  any    any     192.41.108.0/24      anywhere             tcp dpt:ssh
13       0     0 ACCEPT     tcp  --  any    any     EdLAN.net.ed.ac.uk/16  anywhere             tcp dpt:ssh
14       7   420 ACCEPT     tcp  --  any    any     polymer.andrews.metagrid.co.uk  anywhere             tcp dpt:ssh
15       0     0 ACCEPT     tcp  --  any    any     monomer.andrews.metagrid.co.uk  anywhere             tcp dpt:ssh
16       0     0 ACCEPT     all  --  enp4s4f0 any     anywhere             anywhere             ctstate RELATED,ESTABLISHED
17    251K  122M DROP       udp  --  enp4s4f0 any     anywhere             anywhere             udp dpt:bootps
18       0     0 DROP       tcp  --  enp4s4f0 any     anywhere             anywhere             tcp dpt:bootps
19    6684  458K LOG        all  --  any    any     anywhere             anywhere             LOG level warning prefix "drop "
20    6684  458K DROP       all  --  any    any     anywhere             anywhere
--END--


# -----------------------------------------------------
# List the iptables OUTPUT chain.
#[user@headnode]

    sudo iptables \
        --verbose \
        --line-numbers \
        --table filter \
        --list OUTPUT

--START--
Chain OUTPUT (policy DROP 0 packets, 0 bytes)
num   pkts bytes target     prot opt in     out     source               destination
1        0     0 ACCEPT     udp  --  any    virbr0  anywhere             anywhere             udp dpt:bootpc
2        0     0 ACCEPT     udp  --  any    br1     anywhere             anywhere             udp dpt:bootpc
3     8800  761K override   all  --  any    any     anywhere             anywhere
4       71  5443 ACCEPT     all  --  any    lo      anywhere             anywhere
5       74  5560 ACCEPT     udp  --  any    any     anywhere             anywhere             udp spts:1024:65535 dpt:domain
6        0     0 ACCEPT     tcp  --  any    any     anywhere             anywhere             tcp spts:1024:65535 dpt:domain
7       95  7220 ACCEPT     udp  --  any    any     anywhere             anywhere             udp dpt:ntp
8       15   900 ACCEPT     tcp  --  any    any     anywhere             anywhere
9        0     0 LOG        all  --  any    any     anywhere             anywhere             LOG level warning prefix "drop "
10       0     0 DROP       all  --  any    any     anywhere             anywhere
--END--


# -----------------------------------------------------
# Drop the virbr0 rules, because we don't have libvirt installed.
#[user@headnode]

    sudo iptables \
        --table filter \
        --delete OUTPUT 1



# -----------------------------------------------------
# List the iptables OUTPUT chain.
#[user@headnode]

    sudo iptables \
        --verbose \
        --line-numbers \
        --table filter \
        --list OUTPUT


--START--
Chain OUTPUT (policy DROP 0 packets, 0 bytes)
num   pkts bytes target     prot opt in     out     source               destination
1        0     0 ACCEPT     udp  --  any    br1     anywhere             anywhere             udp dpt:bootpc
2     8890  771K override   all  --  any    any     anywhere             anywhere
3       80  6181 ACCEPT     all  --  any    lo      anywhere             anywhere
4       80  6051 ACCEPT     udp  --  any    any     anywhere             anywhere             udp spts:1024:65535 dpt:domain
5        0     0 ACCEPT     tcp  --  any    any     anywhere             anywhere             tcp spts:1024:65535 dpt:domain
6       95  7220 ACCEPT     udp  --  any    any     anywhere             anywhere             udp dpt:ntp
7       15   900 ACCEPT     tcp  --  any    any     anywhere             anywhere
8        0     0 LOG        all  --  any    any     anywhere             anywhere             LOG level warning prefix "drop "
9        0     0 DROP       all  --  any    any     anywhere             anywhere
--END--


# -----------------------------------------------------
# Update the iptables config to match.
# https://www.digitalocean.com/community/tutorials/how-to-implement-a-basic-firewall-template-with-iptables-on-ubuntu-14-04
#[root@work01]

    sudo vi /etc/iptables/rules.v4

        #
        # The INPUT chain.
        # Allow libvirt DHCP requests
    -   [0:0] -A INPUT -i virbr0 -p udp --dport 67 -j ACCEPT
    -   [0:0] -A INPUT -i virbr0 -p tcp --dport 67 -j ACCEPT

        ....
        ....

        #
        # The OUTPUT chain.
        # Allow libvirt DHCP offers.
    -   [0:0] -A OUTPUT -o virbr0 -p udp -m udp --dport 68 -j ACCEPT



# -----------------------------------------------------
# Install docker.
#[user@headnode]

    sudo apt-get install docker.io

# -----------------------------------------------------
# Add our admin users to the docker group.
#[user@headnode]

    sudo usermod --append --groups docker dmr
    sudo usermod --append --groups docker msh

# -----------------------------------------------------
# Logout and back in to update our groups.
#[user@headnode]

    exit

    ssh esperia

# -----------------------------------------------------
# Check our account groups.
#[user@headnode]

    id --groups --name

--START--
dmr sudo docker esperia
--END--


# -----------------------------------------------------
# Run the dnsmasq container interactively.
#[user@headnode]

    source "${HOME}/esperia.settings"

    docker run \
        --rm \
        --tty \
        --interactive \
        --name dnsmasq \
        --network host \
        --volume ${ESPERIA_CODE}/src/dnsmasq:/etc/dnsmasq \
        storytel/dnsmasq

--START--
dnsmasq[1]: started, version 2.78 cachesize 150
dnsmasq[1]: compile time options: IPv6 GNU-getopt no-DBus no-i18n no-IDN DHCP DHCPv6 no-Lua TFTP no-conntrack ipset auth no-DNSSEC loop-detect inotify
dnsmasq-dhcp[1]: DHCP, static leases only on 172.16.10.1, lease time 6h
dnsmasq-dhcp[1]: DHCP, static leases only on 172.16.3.1, lease time 6h
dnsmasq-dhcp[1]: DHCP, static leases only on 172.16.6.1, lease time 6h
dnsmasq-dhcp[1]: DHCP, static leases only on 172.16.4.1, lease time 6h
dnsmasq-dhcp[1]: DHCP, IP range 172.16.252.1 -- 172.16.252.252, lease time 6h
dnsmasq-dhcp[1]: DHCP, static leases only on 172.16.2.1, lease time 6h
dnsmasq-dhcp[1]: DHCP, static leases only on 172.16.9.1, lease time 6h
dnsmasq-dhcp[1]: DHCP, static leases only on 172.16.0.1, lease time 6h
dnsmasq-dhcp[1]: DHCP, static leases only on 172.16.5.1, lease time 6h
dnsmasq-dhcp[1]: DHCP, sockets bound exclusively to interface br1
dnsmasq[1]: using local addresses only for domain esperia
dnsmasq[1]: using local addresses only for domain 16.172.in-addr.arpa
dnsmasq[1]: using nameserver 8.8.8.8#53
dnsmasq[1]: using nameserver 195.194.120.2#53
dnsmasq[1]: using nameserver 195.194.120.1#53
dnsmasq[1]: cleared cache
--END--


# -----------------------------------------------------
# Stop the dnsmasq container on work01.
#[user@work01]

    docker stop $(docker ps -aq)
    docker rm   $(docker ps -aq)


# -----------------------------------------------------
# -----------------------------------------------------
# Update the nameservers on the worker nodes.
#[user@work01]

    sudo vi /etc/netplan/01-netcfg.yaml


        bridges:
          br1:
            addresses: [ 172.16.1.1/16 ]
            interfaces: [ eno1 ]
            dhcp4: false
            optional: true
            nameservers:
              search:
                - ""
    -           - "gaiauk"
    -           - "lsstuk"
    +           - "esperia"
                - "roe.ac.uk"
              addresses:
    -           - "172.16.1.1"
    +           - "172.16.1.11"



    sudo netplan generate

    sudo netplan apply


# -----------------------------------------------------
# Run the dnsmasq container as a daemon.
#[user@headnode]

    docker ps -a

--START--
--END--


    docker stop $(docker ps -aq)
    docker rm   $(docker ps -aq)

    docker run \
        --detach \
        --name dnsmasq \
        --network host \
        --restart always \
        --volume ${ESPERIA_CODE}/src/dnsmasq:/etc/dnsmasq \
        storytel/dnsmasq

    docker ps -a

--START--
--END--


# -----------------------------------------------------
# Follow the dnsmasq logs.
#[user@headnode]

    docker logs --since 5m --follow dnsmasq

--START--
--END--




# TODO

# Update clients
# Remove work01 public IP
# Update headnode public IP




